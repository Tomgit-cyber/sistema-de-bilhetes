{"ast":null,"code":"// Configuração da API para comunicação com o backend\nconst API_BASE_URL = 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      credentials: 'include',\n      // Para incluir cookies de sessão\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro na requisição');\n      }\n      return data;\n    } catch (error) {\n      console.error('Erro na API:', error);\n      throw error;\n    }\n  }\n\n  // Métodos de autenticação\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async logout() {\n    return this.request('/auth/logout', {\n      method: 'POST'\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n\n  // Métodos de usuário\n  async getUserProfile() {\n    return this.request('/user/perfil');\n  }\n  async updateProfile(profileData) {\n    return this.request('/user/perfil', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n  async changePassword(passwordData) {\n    return this.request('/user/alterar-senha', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData)\n    });\n  }\n  async getUserBalance() {\n    return this.request('/user/saldo');\n  }\n  async addBalance(amount) {\n    return this.request('/user/adicionar-saldo', {\n      method: 'POST',\n      body: JSON.stringify({\n        valor: amount\n      })\n    });\n  }\n  async getTransactionHistory(page = 1, perPage = 20) {\n    return this.request(`/user/historico-transacoes?page=${page}&per_page=${perPage}`);\n  }\n\n  // Métodos de apostas\n  async makeAposta(numero) {\n    return this.request('/apostas/fazer-aposta', {\n      method: 'POST',\n      body: JSON.stringify({\n        numero\n      })\n    });\n  }\n  async getMyApostas(page = 1, perPage = 10) {\n    return this.request(`/apostas/minhas-apostas?page=${page}&per_page=${perPage}`);\n  }\n  async getTodayApostas() {\n    return this.request('/apostas/apostas-hoje');\n  }\n  async getAvailableNumbers() {\n    return this.request('/apostas/numeros-disponiveis');\n  }\n\n  // Métodos de sorteios\n  async getCurrentSorteio() {\n    return this.request('/sorteios/sorteio-atual');\n  }\n  async getSorteioHistory(page = 1, perPage = 10) {\n    return this.request(`/sorteios/historico?page=${page}&per_page=${perPage}`);\n  }\n  async getSorteioResult(sorteioId) {\n    return this.request(`/sorteios/resultado/${sorteioId}`);\n  }\n  async getStatistics() {\n    return this.request('/sorteios/estatisticas');\n  }\n\n  // Métodos administrativos (se necessário)\n  async executeManualSorteio(dataSorteio = null) {\n    const body = dataSorteio ? {\n      data_sorteio: dataSorteio\n    } : {};\n    return this.request('/admin/executar-sorteio', {\n      method: 'POST',\n      body: JSON.stringify(body)\n    });\n  }\n  async getSchedulerStatus() {\n    return this.request('/admin/status-scheduler');\n  }\n  async getAdminStatistics() {\n    return this.request('/admin/estatisticas-admin');\n  }\n}\n\n// Instância global da API\nconst api = new ApiService();\nexport default api;","map":{"version":3,"names":["API_BASE_URL","ApiService","constructor","baseURL","request","endpoint","options","url","config","headers","credentials","response","fetch","data","json","ok","Error","error","console","register","userData","method","body","JSON","stringify","login","logout","getCurrentUser","getUserProfile","updateProfile","profileData","changePassword","passwordData","getUserBalance","addBalance","amount","valor","getTransactionHistory","page","perPage","makeAposta","numero","getMyApostas","getTodayApostas","getAvailableNumbers","getCurrentSorteio","getSorteioHistory","getSorteioResult","sorteioId","getStatistics","executeManualSorteio","dataSorteio","data_sorteio","getSchedulerStatus","getAdminStatistics","api"],"sources":["C:/projetos_flutter/projeto-bilhetes/frontend/src/api.js"],"sourcesContent":["// Configuração da API para comunicação com o backend\nconst API_BASE_URL = 'http://localhost:5000/api';\n\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      credentials: 'include', // Para incluir cookies de sessão\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.error || 'Erro na requisição');\n      }\n\n      return data;\n    } catch (error) {\n      console.error('Erro na API:', error);\n      throw error;\n    }\n  }\n\n  // Métodos de autenticação\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n  }\n\n  async logout() {\n    return this.request('/auth/logout', {\n      method: 'POST',\n    });\n  }\n\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n\n  // Métodos de usuário\n  async getUserProfile() {\n    return this.request('/user/perfil');\n  }\n\n  async updateProfile(profileData) {\n    return this.request('/user/perfil', {\n      method: 'PUT',\n      body: JSON.stringify(profileData),\n    });\n  }\n\n  async changePassword(passwordData) {\n    return this.request('/user/alterar-senha', {\n      method: 'PUT',\n      body: JSON.stringify(passwordData),\n    });\n  }\n\n  async getUserBalance() {\n    return this.request('/user/saldo');\n  }\n\n  async addBalance(amount) {\n    return this.request('/user/adicionar-saldo', {\n      method: 'POST',\n      body: JSON.stringify({ valor: amount }),\n    });\n  }\n\n  async getTransactionHistory(page = 1, perPage = 20) {\n    return this.request(`/user/historico-transacoes?page=${page}&per_page=${perPage}`);\n  }\n\n  // Métodos de apostas\n  async makeAposta(numero) {\n    return this.request('/apostas/fazer-aposta', {\n      method: 'POST',\n      body: JSON.stringify({ numero }),\n    });\n  }\n\n  async getMyApostas(page = 1, perPage = 10) {\n    return this.request(`/apostas/minhas-apostas?page=${page}&per_page=${perPage}`);\n  }\n\n  async getTodayApostas() {\n    return this.request('/apostas/apostas-hoje');\n  }\n\n  async getAvailableNumbers() {\n    return this.request('/apostas/numeros-disponiveis');\n  }\n\n  // Métodos de sorteios\n  async getCurrentSorteio() {\n    return this.request('/sorteios/sorteio-atual');\n  }\n\n  async getSorteioHistory(page = 1, perPage = 10) {\n    return this.request(`/sorteios/historico?page=${page}&per_page=${perPage}`);\n  }\n\n  async getSorteioResult(sorteioId) {\n    return this.request(`/sorteios/resultado/${sorteioId}`);\n  }\n\n  async getStatistics() {\n    return this.request('/sorteios/estatisticas');\n  }\n\n  // Métodos administrativos (se necessário)\n  async executeManualSorteio(dataSorteio = null) {\n    const body = dataSorteio ? { data_sorteio: dataSorteio } : {};\n    return this.request('/admin/executar-sorteio', {\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n  }\n\n  async getSchedulerStatus() {\n    return this.request('/admin/status-scheduler');\n  }\n\n  async getAdminStatistics() {\n    return this.request('/admin/estatisticas-admin');\n  }\n}\n\n// Instância global da API\nconst api = new ApiService();\n\nexport default api;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}